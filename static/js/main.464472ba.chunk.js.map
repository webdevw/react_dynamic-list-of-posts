{"version":3,"sources":["types/InputFields.ts","components/PostUser.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentUser.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/Users.ts","App.tsx","index.tsx"],"names":["InputFields","PostUser","post","activePost","handleSideBar","id","title","className","type","classNames","onClick","PostsList","userPosts","map","postItem","Loader","NewCommentForm","postComment","activePostId","isCommentLoading","useState","name","email","body","inputValue","setInputValue","inputError","setInputError","handleChange","event","target","value","prev","isInputFieldError","fieldName","trim","length","addComment","preventDefault","Name","Email","Body","Object","values","every","el","dataComment","postId","onSubmit","htmlFor","onChange","placeholder","CommentUser","commentData","removeComment","href","CommentsList","postComments","commentItem","PostDetails","isCommentsError","isNewCommentForm","setIsNewCommentForm","UserSelector","users","loadUserPosts","currentUser","setCurrentUser","isDropDownActive","setIsDropDownActive","onMouseEnter","onMouseLeave","role","user","selectUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getUserPosts","userId","getPostComments","createComment","deleteComment","App","setUsers","setUserPosts","setPostComments","isLoading","setIsLoading","isError","setIsError","setCommentsError","setActivePost","setIsCommentLoading","clearSidebar","loadUsers","a","usersFromServer","posts","loadComments","comments","newComment","filter","comment","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.464472ba.chunk.js","sourcesContent":["export enum InputFields {\n  Name = 'name',\n  Email = 'email',\n  Body = 'body',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  activePost: Post | null,\n  handleSideBar: (post: Post) => void\n};\n\nexport const PostUser: React.FC<Props> = ({\n  post,\n  activePost,\n  handleSideBar,\n}) => {\n  const { id, title } = post;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={\n            classNames(\n              'button is-link',\n              { 'is-light': id !== activePost?.id },\n            )\n          }\n          onClick={() => handleSideBar(post)}\n        >\n          {id === activePost?.id ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostUser } from './PostUser';\n\ntype Props = {\n  userPosts: Post[],\n  activePost: Post | null,\n  handleSideBar: (post: Post) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  activePost,\n  handleSideBar,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map((postItem) => (\n            <PostUser\n              key={postItem.id}\n              post={postItem}\n              activePost={activePost}\n              handleSideBar={handleSideBar}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { InputFields } from '../types/InputFields';\n\ntype Props = {\n  postComment: (data: Omit<Comment, 'id'>) => Promise<void>,\n  activePostId: number,\n  isCommentLoading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postComment,\n  activePostId,\n  isCommentLoading,\n}) => {\n  const [\n    inputValue,\n    setInputValue,\n  ] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [inputError, setInputError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  function resetForm() {\n    setInputValue({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setInputError({\n      name: false,\n      email: false,\n      body: false,\n    });\n  }\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setInputValue({\n      ...inputValue,\n      [name]: value,\n    });\n\n    setInputError(prev => ({\n      ...prev,\n      [name]: false,\n    }));\n  };\n\n  const isInputFieldError = (fieldName: InputFields) => {\n    return (\n      !inputValue[fieldName].trim().length\n    );\n  };\n\n  const validateForm = () => {\n    setInputError({\n      name: isInputFieldError(InputFields.Name),\n      email: isInputFieldError(InputFields.Email),\n      body: isInputFieldError(InputFields.Body),\n    });\n\n    const validValue = Object.values(inputValue).every(el => el.trim().length);\n\n    return validValue;\n  };\n\n  const addComment = (\n    event: (\n      React.FormEvent<HTMLFormElement>\n      | React.FormEvent<HTMLButtonElement>\n    ),\n  ) => {\n    event.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    const dataComment = {\n      ...inputValue,\n      postId: activePostId,\n    };\n\n    postComment(dataComment);\n\n    setInputValue({\n      ...inputValue,\n      body: '',\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => addComment(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={inputValue.name}\n            onChange={(event) => handleChange(event)}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': inputError.name })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {inputError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={inputValue.email}\n            onChange={(event) => handleChange(event)}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': inputError.email })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {inputError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={inputValue.body}\n            onChange={(event) => handleChange(event)}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': inputError.body })}\n          />\n        </div>\n\n        {inputError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n            onSubmit={(event) => addComment(event)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  commentData: Comment,\n  removeComment: (id: number) => Promise<void>\n};\n\nexport const CommentUser: React.FC<Props> = ({\n  commentData,\n  removeComment,\n}) => {\n  const {\n    name,\n    email,\n    body,\n    id,\n  } = commentData;\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => removeComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { CommentUser } from './CommentUser';\n\ntype Props = {\n  postComments: Comment[],\n  removeComment: (id: number) => Promise<void>\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  postComments,\n  removeComment,\n}) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {postComments.map((commentItem) => (\n        <CommentUser\n          key={commentItem.id}\n          commentData={commentItem}\n          removeComment={removeComment}\n        />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  activePost: Post,\n  postComments: Comment[] | null,\n  isCommentsError: boolean,\n  isNewCommentForm: boolean,\n  setIsNewCommentForm: React.Dispatch<React.SetStateAction<boolean>>,\n  postComment: (data: Omit<Comment, 'id'>) => Promise<void>,\n  isCommentLoading: boolean,\n  removeComment: (id: number) => Promise<void>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  activePost,\n  postComments,\n  isCommentsError,\n  isNewCommentForm,\n  setIsNewCommentForm,\n  postComment,\n  isCommentLoading,\n  removeComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {activePost.title}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {activePost.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {(postComments === null && !isCommentsError) && <Loader />}\n\n        {isCommentsError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {isCommentsError || (\n          <>\n            {!postComments?.length && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {postComments && (\n              <CommentsList\n                postComments={postComments}\n                removeComment={removeComment}\n              />\n            )}\n\n            {isNewCommentForm || (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsNewCommentForm(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </>\n        )}\n      </div>\n\n      {(isNewCommentForm && !isCommentsError) && (\n        <NewCommentForm\n          postComment={postComment}\n          activePostId={activePost.id}\n          isCommentLoading={isCommentLoading}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  loadUserPosts: (id: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  loadUserPosts,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isDropDownActive, setIsDropDownActive] = useState(false);\n\n  const selectUser = (user: User) => {\n    if (currentUser?.id === user.id) {\n      setIsDropDownActive(false);\n\n      return;\n    }\n\n    loadUserPosts(user.id);\n    setCurrentUser(user);\n    setIsDropDownActive(false);\n  };\n\n  function setDropDownList() {\n    setIsDropDownActive(value => !value);\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isDropDownActive })}\n      onMouseEnter={() => setIsDropDownActive(true)}\n      onMouseLeave={() => setIsDropDownActive(false)}\n    >\n      <div\n        className=\"dropdown-trigger\"\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={setDropDownList}\n        >\n          <span>{ currentUser ? currentUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => selectUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  getUsers,\n  getUserPosts,\n  getPostComments,\n  createComment,\n  deleteComment,\n} from './api/Users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCommentsError, setCommentsError] = useState(false);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [isNewCommentForm, setIsNewCommentForm] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  function clearSidebar() {\n    setIsError(false);\n    setCommentsError(false);\n    setIsNewCommentForm(false);\n  }\n\n  const loadUsers = async () => {\n    try {\n      clearSidebar();\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const loadUserPosts = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      setActivePost(null);\n      clearSidebar();\n      const posts = await getUserPosts(userId);\n\n      setUserPosts(posts);\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadComments = async (postId: number) => {\n    try {\n      clearSidebar();\n      const comments = await getPostComments(postId);\n\n      setPostComments(comments);\n    } catch (error) {\n      setCommentsError(true);\n    }\n  };\n\n  const postComment = async (data: Omit<Comment, 'id'>) => {\n    try {\n      setIsCommentLoading(true);\n      const newComment = await createComment(data);\n\n      setPostComments(comments => {\n        return (\n          comments !== null ? ([\n            ...comments,\n            newComment,\n          ]) : (\n            [newComment]\n          ));\n      });\n    } catch (error) {\n      setCommentsError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  const removeComment = async (id: number) => {\n    try {\n      if (postComments !== null) {\n        const comments = postComments.filter(\n          comment => comment.id !== id,\n        );\n\n        setPostComments([...comments]);\n        await deleteComment(id);\n      }\n    } catch (error) {\n      setCommentsError(true);\n    }\n  };\n\n  const handleSideBar = (\n    post: Post,\n  ) => {\n    if (post.id !== activePost?.id) {\n      setPostComments(null);\n      loadComments(post.id);\n    }\n\n    setActivePost(value => (\n      value?.id === post.id ? null : post\n    ));\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  loadUserPosts={loadUserPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {userPosts === null && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(userPosts !== null && !userPosts?.length) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!userPosts?.length && (\n                  <PostsList\n                    userPosts={userPosts}\n                    activePost={activePost}\n                    handleSideBar={handleSideBar}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {activePost && (\n                <PostDetails\n                  activePost={activePost}\n                  postComments={postComments}\n                  isCommentsError={isCommentsError}\n                  isNewCommentForm={isNewCommentForm}\n                  setIsNewCommentForm={setIsNewCommentForm}\n                  postComment={postComment}\n                  isCommentLoading={isCommentLoading}\n                  removeComment={removeComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}